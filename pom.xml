<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2019 the original author or authors

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.foreach.across</groupId>
		<artifactId>across-core-dependencies</artifactId>
		<version>${revision}</version>
		<relativePath>across-core-dependencies</relativePath>
	</parent>

	<artifactId>across-base</artifactId>
	<version>${revision}</version>
	<packaging>pom</packaging>

	<name>${project.groupId}:${project.artifactId}</name>
	<description>
		Across is a Java framework that aims to facilitate module based development for Java (web) applications.
		It builds heavily on Spring framework and allows defining a module consisting of a number of classes and
		configuration files. Every module defines its own Spring application context and can share one or more beans
		with other modules.
	</description>
	<url>https://foreach-across.github.io/</url>
	<licenses>
		<license>
			<name>The Apache License, Version 2.0</name>
			<url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
		</license>
	</licenses>

	<developers>
		<developer>
			<name>Foreach</name>
			<organization>Foreach</organization>
			<organizationUrl>https://www.foreach.be</organizationUrl>
		</developer>
	</developers>

	<properties>
		<!-- Maven/IDE specific -->
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<!-- Across properties -->
		<maven.javadoc.skip>false</maven.javadoc.skip>
		<maven.deploy.skip>false</maven.deploy.skip>
	</properties>

	<modules>
		<module>across-core</module>
		<module>across-web</module>
		<module>across-test</module>
		<module>across-core-dependencies</module>
		<module>across-standard-module-parent</module>
	</modules>

	<scm>
		<url>https://github.com/foreach-across/across-framework</url>
	</scm>

	<dependencyManagement>
		<!-- pinned versions only for across-core, across-test, across-web -->
		<dependencies>
			<dependency>
				<groupId>org.webjars</groupId>
				<artifactId>jquery</artifactId>
				<version>3.3.0</version>
			</dependency>
			<dependency>
				<!-- jsoup HTML parser library @ http://jsoup.org/ -->
				<groupId>org.jsoup</groupId>
				<artifactId>jsoup</artifactId>
				<version>1.9.1</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>3.0.2</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>flatten-maven-plugin</artifactId>
					<configuration>
						<updatePomFile>true</updatePomFile>
						<flattenMode>resolveCiFriendliesOnly</flattenMode>
						<pomElements>
							<name>resolve</name>
							<description>resolve</description>
							<developers>resolve</developers>
							<scm>resolve</scm>
							<pluginManagement>keep</pluginManagement>
							<properties>keep</properties>
							<repositories>remove</repositories>
							<profiles>remove</profiles>
							<modules>remove</modules>
							<build>remove</build>
						</pomElements>
					</configuration>
					<executions>
						<execution>
							<id>flatten</id>
							<phase>process-resources</phase>
							<goals>
								<goal>flatten</goal>
							</goals>
						</execution>
						<execution>
							<id>flatten.clean</id>
							<phase>clean</phase>
							<goals>
								<goal>clean</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>flatten-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>deploy</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!--
					Getting *aggregated* delomboked javadocs to work in combination with a tar assembly is impossible,
					at least if you want that tar file associated to the across root project, so it gets deployed to
					Maven Central (free long-term storage). The reason is that for this to work, the delombok should
					execute first in the child projects, after which the aggregate runs in the parent, but that's impossible:
					https://stackoverflow.com/questions/39027585/maven-multi-module-project-execute-parent-after-child
					Presumably it should be possible to publish the aggregated javadocs in an assembly,
					using reporting/plugins instead of build/plugins, but then you loose the option to deploy to a Maven repository:
					- https://maven.apache.org/plugins/maven-javadoc-plugin/examples/aggregate.html
					- https://maven.apache.org/guides/mini/guide-configuring-plugins.html#introduction
					Another alternative is to use a dedicated 'distribution' module which depends on all other (published) modules in the repository:
					The imageserver repository seems to have done something like that in the past.
					https://maven.apache.org/plugins/maven-javadoc-plugin/examples/aggregate-dependency-sources.html
					We could use GitHub actions to do react only to tags, and publish the released tar.gz file as a GitHub release ...
					GitHub actions: https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions
					2000 min/month will be more than sufficient, but 500MB storage for artifacts isn't much (should definitely switch to .tar.gz then).
					OTOH: https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases#storage-and-bandwidth-quotas
					Basically no limits ...
					So it's basically a choice between correct javadocs, or long-term storage.
					I'd prefer to go for correctness and simplicity:
					- correctness: the Javadocs should include the Lombok-generated symbols
					- correctness: Maven Central requires a javadoc jar for each jar artifact:
					  https://central.sonatype.org/publish/requirements/#supply-javadoc-and-sources
					- simplicity: A single place in the code when delomboked javadocs are configured
					  (or max twice with the complicated configuration in across-framework).
					- simplicity: The maven-assembly-plugin is not known for simplicity.
					This option would mean:
					- javadoc jar for each jar module
					- no assembly at all
					Or we could go for compatibility:
					- For across-base/across-framework: publish an assembly with aggregated javadocs, but not delomboked.
					  E.g. this has 3 getters, whereas there are really 6:
					  https://docs.across.dev/across/5.1.0.RELEASE/javadoc/com/foreach/across/core/context/bootstrap/AcrossBootstrapTimer.html
					  https://repo1.maven.org/maven2/com/foreach/across/across-base/5.1.0.RELEASE/ has a tarball for that.
					- Modules used to have the -project published to Maven Central, which had a distribution tarball with javadocs:
					  https://repo1.maven.org/maven2/com/foreach/across/modules/admin-web-module-project/3.2.0.RELEASE/
					  More recent releases no longer the -project published, only the modules themselves, which do also include a tarball:
					  https://repo1.maven.org/maven2/com/foreach/across/modules/admin-web-module/4.1.0.RELEASE/
					  This is published on the docs website:
					  https://docs.across.dev/across-standard-modules/AdminWebModule/4.1.0.RELEASE/javadoc/
					  Previously, some of the modules used delombok for javadocs, others didn't.
					  That's fixed in this commit.
					Conclusion: I went for a mix of compatibility and simplicity:
					- Framework:
					  - Attached javadoc jar is now based on delombok'd sources.
					  - There is a still an attached across-base-distribution with aggregated javadocs, but it's still not based on delombok'd sources,
					    since that's impossible.
					- Modules:
					  - The attached javadoc jar are now systematically based on delombok'd sources.
					  - The per-module attached tar distribution has been removed, since it's redundant with the javadoc jar.
					-->
					<plugin>
						<groupId>org.projectlombok</groupId>
						<artifactId>lombok-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>generate-sources</phase>
								<goals>
									<goal>delombok</goal>
								</goals>
								<configuration>
									<addOutputDirectory>false</addOutputDirectory>
									<outputDirectory>target/delombok</outputDirectory>
									<sourceDirectory>src/main/java</sourceDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<configuration>
							<failOnError>false</failOnError>
							<doclint>none</doclint>
						</configuration>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>jar</goal>
								</goals>
								<configuration>
									<sourcepath>
										target/delombok;target/generated-sources
									</sourcepath>
								</configuration>
							</execution>
							<execution>
								<id>aggregate</id>
								<inherited>false</inherited>
								<phase>prepare-package</phase>
								<goals>
									<goal>aggregate-no-fork</goal>
								</goals>
								<configuration>
									<reportOutputDirectory>${project.reporting.outputDirectory}</reportOutputDirectory>
									<destDir>${project.version}/javadoc</destDir>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<inherited>false</inherited>
						<configuration>
							<finalName>${project.artifactId}</finalName>
							<skipAssembly>${maven.javadoc.skip}</skipAssembly>
							<descriptors>
								<descriptor>assembly.xml</descriptor>
							</descriptors>
						</configuration>
						<executions>
							<execution>
								<id>make-assembly</id>
								<!-- this is used for inheritance merges -->
								<phase>package</phase>
								<!-- bind to the packaging phase -->
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>